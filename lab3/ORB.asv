clear all;

% Load images
boxImage = imread('elephant.jpg'); % Assuming 'carpet.jpg' is your pattern image
sceneImage = imread('clutteredDesk.jpg'); % Your scene image

% cropping images

figure(1), clf, imshow(boxImage), title('Select area');
drewPolygon = drawpolygon();
wait(drewPolygon); % wait to draw a polygon

poliPosition = drewPolygon.Position;
% in the example they used a binary mask
bwMask = poly2mask(poliPosition(:,1), ...
    poliPosition(:,2), ...
    size(boxImage, 1), ...
    size(boxImage, 2));
croppedImage = boxImage;
croppedImage(repmat(~bwMask, [1, 1, size(boxImage, 3)])) = 0;

figure(2), clf, imshow(croppedImage), title('Cropped Image');
%boxImage = croppedImage;

%% Keypoint Detection using ORB instead of SURF
tic
% better for repeating patterns
boxPoints = detectORBFeatures(boxImage);
scenePoints = detectORBFeatures(sceneImage);

% Visualize strongest keypoints
figure(1), clf
imshow(boxImage), hold on

% showscale to suppress circles
plot(selectStrongest(boxPoints, 100), 'ShowScale', false), hold off

figure(2), clf
imshow(sceneImage), hold on
plot(selectStrongest(scenePoints, 100), 'ShowScale', false), hold off

%% Keypoint Description and Matching
% Extract ORB features
[boxFeatures, boxPoints] = extractFeatures(boxImage, boxPoints, 'Method', 'ORB');
[sceneFeatures, scenePoints] = extractFeatures(sceneImage, scenePoints, 'Method', 'ORB');

% Match features using a treshold
boxPairs = matchFeatures(boxFeatures, sceneFeatures, ...
    'MatchThreshold', 50, 'MaxRatio', 0.7);

% Extract matching points
matchedBoxPoints = boxPoints(boxPairs(:,1), :);
matchedScenePoints = scenePoints(boxPairs(:,2), :);

% Show matched features
showMatchedFeatures(boxImage, sceneImage, matchedBoxPoints, matchedScenePoints, 'montage');

%% Geometric Consistency Check
% Estimate geometric transformation
[tform, inlierBoxPoints, inlierScenePoints] = ...
    estimateGeometricTransform(matchedBoxPoints, matchedScenePoints, 'affine');

% Show inlier matches
showMatchedFeatures(boxImage, sceneImage, inlierBoxPoints, inlierScenePoints, 'montage');

%% Bounding Box Drawing
% Define box polygon
boxPoly = [1, 1;...
    size(boxImage, 2), 1;...
    size(boxImage, 2), size(boxImage, 1);...
    1, size(boxImage, 1);...
    1, 1];

% Transform box polygon
newBoxPoly = transformPointsForward(tform, boxPoly);

% Display result
figure, clf
imshow(sceneImage), hold on
line(newBoxPoly(:, 1), newBoxPoly(:, 2), 'Color', 'y');
hold off
toc


%% more precise bounding box
figure, clf
imshow(boxImage)
[x,y]=ginput();
%%
x=[x; x(1)];
y=[y; y(1)];
newBoxPoly=transformPointsForward(tform,[x y]);
figure, clf
imshow(sceneImage), hold on
line(newBoxPoly(:,1),newBoxPoly(:,2),'Color','y')
hold off
toc